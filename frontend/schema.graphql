# source: https://api-wwh.codevillains.me/graphql
# timestamp: Sun Mar 01 2020 02:18:10 GMT+0100 (czas Å›rodkowoeuropejski standardowy)

type Client {
  id: String!
  name: String!
  height: Int!
  pictureUrl: String!
}

type ClientCoachCooperation {
  id: String!
  clientId: String!
  coachId: String!
}

type Coach {
  id: String!
  name: String!
  pictureUrl: String!
}

type CreateExampleResult {
  result: String
  errors: [String!]
}

input ExampleInput {
  id: String!
  value: String!
}

type Exercise {
  id: String!
  imgurl: String!
  name: String!
}

type Gym {
  id: String!
  name: String!
  location: Location!
  imgurl: String
  coachIds: [String!]!
  coaches: [Coach!]!
}

type Location {
  lat: Float!
  lng: Float!
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Measurement {
  id: String!
  clientId: String!
  timestamp: Long!
  weight: Float
  neck: Float
  leftBicep: Float
  rightBicep: Float
  leftForearm: Float
  rightForearm: Float
  chest: Float
  waist: Float
  hip: Float
  rightThigh: Float
  leftThigh: Float
  rightCalf: Float
  leftCalf: Float
}

enum MuscleGroup {
  Shoulders
  Back
  Chest
  Arms
  Legs
}

type Mutation {
  addExample(example: ExampleInput!): CreateExampleResult!
  addWorkout(training: WorkoutInput!): Workout
  updateWorkout(training: WorkoutInput!): Workout
  addCoach(coachName: String!, coachPictureUrl: String!): Coach!
  addClient(clientName: String!, clientHeight: Int!, clientPictureUrl: String!): Client!
  addCooperation(coachId: String!, clientId: String!): ClientCoachCooperation!
  addMeasurement(clientId: String!, timestamp: Long!, weight: Float, neck: Float, leftBicep: Float, rightBicep: Float, leftForearm: Float, rightForearm: Float, chest: Float, waist: Float, hip: Float, rightThigh: Float, leftThigh: Float, rightCalf: Float, leftCalf: Float): Measurement!
}

type PlannedExercise {
  trainingId: String!
  plannedSeries: [Series!]!
  doneSeries: [Series!]!
  restAfter: Int!
  id: String!
  exercise: Exercise
}

input PlannedExerciseInput {
  exerciseId: String!
  trainingId: String!
  plannedSeries: [SeriesInput!]!
  doneSeries: [SeriesInput!]!
  restAfter: Int!
}

type Query {
  gyms(lat: Float!, lng: Float!): [Gym!]!
  workouts(from: Long!, to: Long!, coachId: String, clientId: String): [Workout!]!
  workout(workoutId: String!): Workout
  exercises: [Exercise!]!
  getCoachesByIds(ids: [String!]!): [Coach!]!
  getClientsByIds(ids: [String!]!): [Client!]!
  clientsForCoach(coachId: String!): [String!]!
  coachesForClient(clientId: String!): [String!]!
  getMostRecentFor(clientId: String!): Measurement!
  getAllFor(clientId: String!): [Measurement!]!
}

type Series {
  id: String!
  reps: Int!
  rest: Int!
  weight: Int
}

input SeriesInput {
  id: String!
  reps: Int!
  rest: Int!
  weight: Int
}

type Workout {
  id: String!
  name: String!
  muscleGroup: [MuscleGroup!]!
  coachId: String
  clientId: String!
  dateFrom: Long!
  exercises: [PlannedExercise!]!
  dateTo: Long!
  inperson: Boolean!
}

input WorkoutInput {
  id: String!
  name: String!
  muscleGroup: [String!]!
  coachId: String
  clientId: String!
  dateFrom: Long!
  dateTo: Long!
  exercises: [PlannedExerciseInput!]!
  inperson: Boolean!
}
